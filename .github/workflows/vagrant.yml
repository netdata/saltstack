---
# CI code for testing SaltStack Netdata scripts
name: SaltStack
on:
  push:
    branches:
      - develop

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: ASCII Validation
        run: |
          find . \( -name .vagrant -o -name .git \) -prune -o -type f -name '*' -print | while read fname; do
            if file "$fname" | grep ASCII &>/dev/null; then
              echo "$fname: .. OK!"
            else
              echo "$fname: .. FAIL!"
              exit 1
            fi
          done
      - name: Yaml Lint
        run: |
          sudo apt install yamllint
          find . \( -name .vagrant -o -name .git -o -name .github \) -prune -o -type f \( -name '*.yml' -or -name '*.yaml' \) -print | while read fname; do
            if yamllint -d "{extends: relaxed, rules: {line-length: {max: 200}}}" "$fname" &>/dev/null; then
              echo "$fname: .. OK!"
            else
              echo "$fname: .. FAIL!"
              exit 1
            fi
          done
      - name: Salt Lint
        uses: roaldnefs/salt-lint-action@master
        env:
          ACTION_STATE_FIND_PATTERN: '^.*\.(sls|jinja|j2|tmpl|tst)$'
          ACTION_STATE_FIND_TYPE: 'regex'
          SALT_LINT_EXTRA_PARAMS: '-v'
      - name: Salt Dry Run
        run: |
          wget https://raw.githubusercontent.com/saltstack/salt-bootstrap/develop/bootstrap-salt.sh
          sudo bash bootstrap-salt.sh
          sudo salt-call --local --file-root=salt state.sls netdata.install test=true
  setup:
    runs-on: ubuntu-latest
    outputs:
       matrix: ${{ steps.setmatrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set Dynamic Matrix
        id: setmatrix
        run: |
          import yaml
          x = {}
          with open('servers.yml') as fh:
            runs = []
            read_data = yaml.safe_load(fh)
            for i in read_data:
              if i['enable'] == True:
                s = {}
                s['image'] = i['name']
                s['check_install_type'] = i['check_install_type']
                runs.append(s)
          x['include'] = runs
          print(f'::set-output name=matrix::{x}')
        shell: python
  test:
    name: Test Salt
    runs-on: macos-10.15
    needs: [ setup, validate ]
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Update vagrant and virtualbox
        run: |
          brew upgrade vagrant
          brew upgrade --cask virtualbox
      - name: Create ${{ matrix.image }}
        run: |
          (echo "### vagrant up - 1st attempt ###" && vagrant up ${{ matrix.image }}) || \
          (echo "### vagrant up - 2st attempt ###" && vagrant destroy ${{ matrix.image }} -f && vagrant up ${{ matrix.image }}) || \
          (echo "### vagrant up - 3st attempt ###" && vagrant destroy ${{ matrix.image }} -f && vagrant up ${{ matrix.image }}) || \
          (echo "### vagrant up - FAILED ###" && exit 1)
      - name: Run Salt Netdata state on ${{ matrix.image }}
        run: |
          vagrant ssh ${{ matrix.image }} -- -t "sudo salt-call state.sls netdata.install pillar='{\"check_install_type\":\"${{ matrix.check_install_type }}\"}' --retcode-passthrough"
      - name: Cleanup
        if: always()
        run: |
          vagrant destroy ${{ matrix.image }} -f
