---
# CI code for testing SaltStack Netdata scripts
name: SaltStack
on:
  push:
    branches:
      - develop

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: ASCII Validation
        run: |
          find . \( -name .vagrant -o -name .git \) -prune -o -type f -name '*' -print | while read fname; do
            if file "$fname" | grep ASCII &>/dev/null; then
              echo "$fname: .. OK!"
            else
              echo "$fname: .. FAIL!"
              exit 1
            fi
          done
      - name: Yaml Lint
        run: |
          sudo apt install yamllint
          find . \( -name .vagrant -o -name .git -o -name .github \) -prune -o -type f \( -name '*.yml' -or -name '*.yaml' \) -print | while read fname; do
            if yamllint -d "{extends: relaxed, rules: {line-length: {max: 200}}}" "$fname" &>/dev/null; then
              echo "$fname: .. OK!"
            else
              echo "$fname: .. FAIL!"
              exit 1
            fi
          done
      - name: Salt Lint
        run: |
          sudo apt install python3-pip && pip install salt-lint
          PATH="$PATH:~/.local/bin"
          files=( $(find . \( -name .vagrant -o -name .git -o -name .github \) -prune -o -type f \( -name '*.sls' -or -name '*.jinja' -or -name '*.j2' \) -print) )
          for fname in ${files[@]}; do
            if salt-lint "$fname" &>/dev/null; then
              echo "$fname: .. OK!"
            else
              echo "$fname: .. FAIL!"
              exit 1
            fi
          done
      - name: Salt Dry Run
        run: |
          wget https://raw.githubusercontent.com/saltstack/salt-bootstrap/develop/bootstrap-salt.sh
          sudo bash bootstrap-salt.sh
          sudo salt-call --local --file-root=salt state.sls netdata.install test=true
  setup:
    runs-on: ubuntu-latest
    outputs:
       matrix_static: ${{ steps.setmatrix.outputs.matrix_static }}
       matrix_native: ${{ steps.setmatrix.outputs.matrix_native }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set Dynamic Matrix
        id: setmatrix
        run: |
          import yaml
          matrix_static = {}
          matrix_native = {}
          with open('servers.yml') as fh:
            runs_static = []
            runs_native = []
            read_data = yaml.safe_load(fh)
            for i in read_data:
              if i['enable'] == True and i['check_install_type'] == 'static':
                s = {}
                s['image'] = i['name']
                s['check_install_type'] = i['check_install_type']
                runs_static.append(s)
              if i['enable'] == True and i['check_install_type'] == 'native':
                s = {}
                s['image'] = i['name']
                s['check_install_type'] = i['check_install_type']
                runs_native.append(s)
          matrix_static['include'] = runs_static
          matrix_native['include'] = runs_native
          print(f'::set-output name=matrix_static::{matrix_static}')
          print(f'::set-output name=matrix_native::{matrix_native}')
        shell: python
  test_static:
    name: Test Salt Static Install
    runs-on: macos-10.15
    needs: [ setup, validate ]
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix_static) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Update vagrant and virtualbox
        run: |
          brew upgrade vagrant
          brew upgrade --cask virtualbox
      - name: Create ${{ matrix.image }}
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 2400
          max_attempts: 3
          command: |
            vagrant destroy ${{ matrix.image }} -f || true
            vagrant up ${{ matrix.image }}
      - name: Run Salt Netdata install state on ${{ matrix.image }}
        run: |
          vagrant ssh ${{ matrix.image }} -- -t "sudo salt-call state.sls netdata.install pillar='{\"check_install_type\":\"${{ matrix.check_install_type }}\"}' --retcode-passthrough"
      - name: Run Salt Netdata uninstall state on ${{ matrix.image }}
        run: |
          vagrant ssh ${{ matrix.image }} -- -t "sudo salt-call state.sls netdata.uninstall pillar='{\"check_install_type\":\"${{ matrix.check_install_type }}\"}' --retcode-passthrough"
      - name: Cleanup
        if: always()
        run: |
          vagrant destroy ${{ matrix.image }} -f
  test_native:
    name: Test Salt Native Install
    runs-on: macos-10.15
    needs: [ setup, validate ]
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix_native) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Update vagrant and virtualbox
        run: |
          brew upgrade vagrant
          brew upgrade --cask virtualbox
      - name: Create ${{ matrix.image }}
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 1200
          max_attempts: 3
          command: |
            vagrant destroy ${{ matrix.image }} -f || true
            vagrant up ${{ matrix.image }}
      - name: Run Salt Netdata state on ${{ matrix.image }}
        run: |
          vagrant ssh ${{ matrix.image }} -- -t "sudo salt-call state.sls netdata.install pillar='{\"check_install_type\":\"${{ matrix.check_install_type }}\"}' --retcode-passthrough"
      - name: Run Salt Netdata uninstall state on ${{ matrix.image }}
        run: |
          vagrant ssh ${{ matrix.image }} -- -t "sudo salt-call state.sls netdata.uninstall pillar='{\"check_install_type\":\"${{ matrix.check_install_type }}\"}' --retcode-passthrough"
      - name: Cleanup
        if: always()
        run: |
          vagrant destroy ${{ matrix.image }} -f
